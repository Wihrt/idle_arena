name: "Deploy application"
on:
  push:
    branches:
      - develop
      - main

env:
  DOCKER_USER: megalooo
  ANSIBLE_VERSION: "4.3.0"
  WORKDIR_ANSIBLE: "_deploy/ansible"
  WORKDIR_HELMFILE: "_deploy/helmfile"

jobs:
  docker-bot:
    name: "Build and Push Docker bot image v2"
    runs-on: ubuntu-latest
    env:
      IMAGE: arena_bot
      CONTEXT: .
      GOBINARY: arenaBot
      GOFILE: ./bin/bot/bot.go
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
        with:
          install: true
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Login to Dockerhub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: true

      - name: Docker push latest
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

      - name: Docker push main
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

  docker-backend:
    name: "Build and Push Docker backend image"
    runs-on: ubuntu-latest
    env:
      IMAGE: arena_backend
      CONTEXT: .
      GOBINARY: arenaBackend
      GOFILE: ./bin/backend/backend.go
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
        with:
          install: true
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Login to Dockerhub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: true

      - name: Docker push latest
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

      - name: Docker push main
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

  docker-loader:
    name: "Build and Push Docker loader image"
    runs-on: ubuntu-latest
    env:
      IMAGE: arena_loader
      CONTEXT: .
      GOBINARY: arenaLoader
      GOFILE: ./bin/loader/loader.go
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
        with:
          install: true
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Login to Dockerhub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: true

      - name: Docker push latest
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

      - name: Docker push main
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"


  docker-ansible:
    name: "Pull or build Ansible docker image"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Docker login
      run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Build Ansible Docker image
      working-directory: ${{ env.WORKDIR_ANSIBLE }}
      run: |-
        docker pull ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }} ||
        (docker build --build-arg ANSIBLE_VERSION=${{ env.ANSIBLE_VERSION }} -t ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }} . &&
        docker push ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }})

  ansible:
    name: "Prepare environment"
    runs-on: ubuntu-latest
    needs:
      - docker-ansible
    container:
      image: megalooo/ansible:4.3.0
    env:
      PRIVATE_KEY: "vps_private_key"
      TARGET_HOST: ${{ secrets.TARGET_HOST }}
      TARGET_USER: ${{ secrets.TARGET_USER }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Decrypt private key
      working-directory: ${{ env.WORKDIR_ANSIBLE }}
      run: |-
        echo "${{ secrets.SSH_KEY }}" > $PRIVATE_KEY
        chmod 0600 $PRIVATE_KEY
    - name: Install prerequistes on server
      working-directory: ${{ env.WORKDIR_ANSIBLE }}
      run: |-
        ansible-playbook -e "target=$TARGET_HOST" -e "target_user=$TARGET_USER" -e "private_key=$PRIVATE_KEY" -t remote,k3s,kubectl,helm,kubeconfig playbook.yml
    - name: Upload kubeconfig file
      uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: _deploy/ansible/kubeconfig
        retention-days: 1

  helmfile:
    name: "Deploy application"
    needs:
      - ansible
      - docker-bot
      - docker-backend
      - docker-loader
    runs-on: ubuntu-latest
    container:
      image: quay.io/roboll/helmfile:helm3-v0.140.0
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download kubeconfig file
      uses: actions/download-artifact@v2
      with:
        name: kubeconfig
    - name: Change right on kubeconfig
      run: chmod 0600 kubeconfig
    - name: Install GPG and inject GPG private key
      env:
        PRIVATE_KEY: private.key
      run: |-
        apk add --no-cache --update gnupg
        echo "${{ secrets.PGP_KEY }}" > $PRIVATE_KEY
        gpg --import $PRIVATE_KEY
        rm -f $PRIVATE_KEY
    - name: Install Helm plugins
      run: |-
        helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.2
        helm plugin install https://github.com/databus23/helm-diff
    - name: Run Helmfile - Develop
      working-directory: ${{ env.WORKDIR_HELMFILE }}
      if: github.ref == 'refs/heads/develop'
      env:
        KUBECONFIG: ../../kubeconfig
        ENVIRONMENT: develop
      run: |-
        helmfile -e $ENVIRONMENT destroy
        kubectl delete ns arena-$ENVIRONMENT || echo "Namespace not found"
        helmfile -e $ENVIRONMENT sync
    - name: Run Helmfile - Production
      working-directory: ${{ env.WORKDIR_HELMFILE }}
      if: github.ref == 'refs/heads/main'
      env:
        KUBECONFIG: ../../kubeconfig
        ENVIRONMENT: production
      run: |-
        helmfile -e $ENVIRONMENT sync

  remove-artifact:
    name: "Remove artifacts"
    runs-on: ubuntu-latest
    needs:
      - helmfile
    steps:
      - name: Remove kubeconfig artifact
        uses: jimschubert/delete-artifacts-action@v1
        with:
          log_level: "debug"
          artifact_name: "kubeconfig"
          min_bytes: "0"

