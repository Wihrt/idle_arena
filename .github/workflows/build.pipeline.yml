name: "Build and Deploy application"

on: ["push", "pull_request"]

env:
  DOCKER_USER: megalooo
  ANSIBLE_VERSION: "4.3.0"

jobs:
  docker-bot:
    name: "Build and Push Docker bot image"
    runs-on: ubuntu-latest
    env:
      IMAGE: arena_bot
      CONTEXT: ./golang
      GOBINARY: arenaBot
      GOFILE: ./bot/bot.go
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Docker login
        run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        run: |-
          docker build --build-arg GOBINARY=${{ env.GOBINARY }} --build-arg GOFILE=${{ env.GOFILE }} -t ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.CONTEXT }}
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Tag Docker image to latest
        if: github.ref != 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
      - name: Tag Docker image to main
        if: github.ref == 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
      
  docker-backend:
    name: "Build and Push Docker backend image"
    runs-on: ubuntu-latest
    env:
        IMAGE: arena_backend
        CONTEXT: ./golang
        GOBINARY: arenaBackend
        GOFILE: ./backend/backend.go
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Docker login
        run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        run: |-
          docker build --build-arg GOBINARY=${{ env.GOBINARY }} --build-arg GOFILE=${{ env.GOFILE }} -t ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.CONTEXT }}
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Tag Docker image to latest
        if: github.ref != 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
      - name: Tag Docker image to master
        if: github.ref == 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
  
  docker-ansible:
    name: "Pull or build Ansible docker image"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Docker login
      run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Build Ansible Docker image
      run: |-
        docker pull ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }} || 
        (cd ansible &&
        docker build --build-arg ANSIBLE_VERSION=${{ env.ANSIBLE_VERSION }} -t ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }} . && 
        docker push ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }})
  
  ansible:
    name: "Prepare environment"
    runs-on: ubuntu-latest
    needs:
      - docker-ansible
    container:
      image: megalooo/ansible:4.3.0
    env:
      PRIVATE_KEY: "vps_private_key"
      TARGET_HOST: ${{ secrets.TARGET_HOST }}
      TARGET_USER: ${{ secrets.TARGET_USER }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Decrypt private key
      run: |-
        cd ansible
        echo "${{ secrets.SSH_KEY }}" > $PRIVATE_KEY
        chmod 0600 $PRIVATE_KEY
    - name: Install prerequistes on server
      run: |- 
        cd ansible
        ansible-playbook -e "target=$TARGET_HOST" -e "target_user=$TARGET_USER" -e "private_key=$PRIVATE_KEY" -t remote,k3s,kubectl,helm,kubeconfig playbook.yml
    - name: Upload kubeconfig file
      uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: ansible/kubeconfig
        retention-days: 0
  
  helmfile:
    name: "Deploy application"
    needs:
      - ansible
      - docker-bot
      - docker-backend
    runs-on: ubuntu-latest
    container:
      image: quay.io/roboll/helmfile:helm3-v0.140.0
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download kubeconfig file
      uses: actions/download-artifact@v2
      with:
        name: kubeconfig
    - name: Change right on kubeconfig
      run: chmod 0600 kubeconfig
    - name: Install GPG and inject GPG private key
      env:
        PRIVATE_KEY: private.key
      run: |-
        apk add --no-cache --update gnupg
        echo "${{ secrets.PGP_KEY }}" > $PRIVATE_KEY
        gpg --import $PRIVATE_KEY
        rm -f $PRIVATE_KEY
    - name: Install Helm plugins
      run: |-
        helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.2
        helm plugin install https://github.com/databus23/helm-diff
    - name: Run Helmfile - Develop
      if: github.ref != 'refs/heads/main'
      env:
        KUBECONFIG: ../kubeconfig
        ENVIRONMENT: develop
      run: |-
        cd helmfile
        helmfile -e $ENVIROMENT destroy
        helmfile -e $ENVIRONMENT sync 
    - name: Run Helmfile - Production
      if: github.ref == 'refs/heads/main'
      env:
        KUBECONFIG: ../kubeconfig
        ENVIRONMENT: production
      run: |-
        cd helmfile
        helmfile -e $ENVIRONMENT sync

