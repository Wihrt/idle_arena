name: "Build and Deploy application"

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

env:
  DOCKER_USER: megalooo
  ANSIBLE_VERSION: "4.3.0"
  GOSEC_VERSION: "2.8.1"
  HADOLINT_VERSION: "2.6.1"

jobs:
  golang-security:
    name: "Check Golang security code"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download gosec
        working-directory: golang
        run: |-
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $PWD v${{ env.GOSEC_VERSION }}
          chmod u+x gosec
      - name: Run Gosec Security Scanner
        working-directory: golang
        run: |-
          ./gosec -exclude G404 -fmt json -out gosec.result.json ./...
      - name: Upload gosec.result.json file
        uses: actions/upload-artifact@v2
        with:
          name: gosec
          path: golang/gosec.result.json
          retention-days: 7
  
  docker-lint:
    name: "Docker Lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download hadolint
        working-directory: golang
        run: |-
          curl -sfL https://github.com/hadolint/hadolint/releases/download/v${{ env.HADOLINT_VERSION }}/hadolint-Linux-x86_64 -o hadolint
          chmod u+x ./hadolint
      - name: Run Hadolint
        working-directory: golang
        run: |-
          ./hadolint Dockerfile > hadolint.json
      - name: Upload gosec.result.json file
        uses: actions/upload-artifact@v2
        with:
          name: docker-lint
          path: golang/hadolint.json
          retention-days: 7

  docker-bot2:
    name: "Build and Push Docker bot image v2"
    runs-on: ubuntu-latest
    needs:
      - golang-security
      - docker-lint
    env:
      IMAGE: arena_bot
      CONTEXT: ./golang
      GOBINARY: arenaBot
      GOFILE: ./bot/bot.go
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
        with:
          install: true
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Login to Dockerhub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: true
      - name: Docker build
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          load: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

      - name: Docker scan
        run: |-
          docker scan --accept-license ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Docker push latest
        if: github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

      - name: Docker push main
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2.6.1
        with:
          context: ${{ env.CONTEXT }}
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          build-args: |-
            "GOBINARY=${{ env.GOBINARY }}"
            "GOFILE=${{ env.GOFILE }}"

      
  docker-bot:
    name: "Build and Push Docker bot image"
    runs-on: ubuntu-latest
    needs:
      - golang-security
      - docker-lint
    env:
      IMAGE: arena_bot
      CONTEXT: ./golang
      GOBINARY: arenaBot
      GOFILE: ./bot/bot.go
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Docker login
        run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        run: |-
          docker build --build-arg GOBINARY=${{ env.GOBINARY }} --build-arg GOFILE=${{ env.GOFILE }} -t ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.CONTEXT }}
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Tag Docker image to latest
        if: github.ref == 'refs/heads/develop'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
      - name: Tag Docker image to main
        if: github.ref == 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
      
  docker-backend:
    name: "Build and Push Docker backend image"
    runs-on: ubuntu-latest
    needs:
      - golang-security
      - docker-lint
    env:
        IMAGE: arena_backend
        CONTEXT: ./golang
        GOBINARY: arenaBackend
        GOFILE: ./backend/backend.go
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Docker login
        run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        run: |-
          docker build --build-arg GOBINARY=${{ env.GOBINARY }} --build-arg GOFILE=${{ env.GOFILE }} -t ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.CONTEXT }}
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Tag Docker image to latest
        if: github.ref == 'refs/heads/develop'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
      - name: Tag Docker image to master
        if: github.ref == 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main

  docker-loader:
    name: "Build and Push Docker loader image"
    runs-on: ubuntu-latest
    needs:
      - golang-security
      - docker-lint
    env:
        IMAGE: arena_loader
        CONTEXT: ./golang
        GOBINARY: arenaLoader
        GOFILE: ./loader/loader.go
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Docker login
        run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        run: |-
          docker build --build-arg GOBINARY=${{ env.GOBINARY }} --build-arg GOFILE=${{ env.GOFILE }} -t ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.CONTEXT }}
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Tag Docker image to latest
        if: github.ref == 'refs/heads/develop'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:latest
      - name: Tag Docker image to master
        if: github.ref == 'refs/heads/main'
        run: |-
          docker tag ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:${{ github.sha }} ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main
          docker push ${{ env.DOCKER_USER }}/${{ env.IMAGE }}:main

  
  docker-ansible:
    name: "Pull or build Ansible docker image"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Docker login
      run: docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Build Ansible Docker image
      working-directory: ansible
      run: |-
        docker pull ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }} || 
        (docker build --build-arg ANSIBLE_VERSION=${{ env.ANSIBLE_VERSION }} -t ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }} . && 
        docker push ${{ env.DOCKER_USER }}/ansible:${{ env.ANSIBLE_VERSION }})
  
  ansible:
    name: "Prepare environment"
    runs-on: ubuntu-latest
    needs:
      - docker-ansible
    container:
      image: megalooo/ansible:4.3.0
    env:
      PRIVATE_KEY: "vps_private_key"
      TARGET_HOST: ${{ secrets.TARGET_HOST }}
      TARGET_USER: ${{ secrets.TARGET_USER }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Decrypt private key
      working-directory: ansible
      run: |-
        echo "${{ secrets.SSH_KEY }}" > $PRIVATE_KEY
        chmod 0600 $PRIVATE_KEY
    - name: Install prerequistes on server
      working-directory: ansible
      run: |- 
        ansible-playbook -e "target=$TARGET_HOST" -e "target_user=$TARGET_USER" -e "private_key=$PRIVATE_KEY" -t remote,k3s,kubectl,helm,kubeconfig playbook.yml
    - name: Upload kubeconfig file
      uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: ansible/kubeconfig
        retention-days: 0
  
  helmfile:
    name: "Deploy application"
    needs:
      - ansible
      - docker-bot
      - docker-backend
      - docker-loader
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    container:
      image: quay.io/roboll/helmfile:helm3-v0.140.0
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download kubeconfig file
      uses: actions/download-artifact@v2
      with:
        name: kubeconfig
    - name: Change right on kubeconfig
      run: chmod 0600 kubeconfig
    - name: Install GPG and inject GPG private key
      env:
        PRIVATE_KEY: private.key
      run: |-
        apk add --no-cache --update gnupg
        echo "${{ secrets.PGP_KEY }}" > $PRIVATE_KEY
        gpg --import $PRIVATE_KEY
        rm -f $PRIVATE_KEY
    - name: Install Helm plugins
      run: |-
        helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.2
        helm plugin install https://github.com/databus23/helm-diff
    - name: Run Helmfile - Develop
      working-directory: helmfile
      if: github.ref == 'refs/heads/develop'
      env:
        KUBECONFIG: ../kubeconfig
        ENVIRONMENT: develop
      run: |-
        helmfile -e $ENVIRONMENT destroy
        kubectl delete ns arena-$ENVIRONMENT
        helmfile -e $ENVIRONMENT sync 
    - name: Run Helmfile - Production
      working-directory: helmfile
      if: github.ref == 'refs/heads/main'
      env:
        KUBECONFIG: ../kubeconfig
        ENVIRONMENT: production
      run: |-
        helmfile -e $ENVIRONMENT sync

